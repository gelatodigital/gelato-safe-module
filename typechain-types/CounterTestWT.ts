/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CounterTestWTInterface extends utils.Interface {
  contractName: "CounterTestWT";
  functions: {
    "checker()": FunctionFragment;
    "count()": FunctionFragment;
    "dedicatedMsgSender()": FunctionFragment;
    "increaseCount(uint256)": FunctionFragment;
    "lastExecuted()": FunctionFragment;
    "ops()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "dedicatedMsgSender", values?: undefined): string;
  encodeFunctionData(functionFragment: "increaseCount", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "lastExecuted", values?: undefined): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;

  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dedicatedMsgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastExecuted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;

  events: {};
}

export interface CounterTestWT extends BaseContract {
  contractName: "CounterTestWT";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CounterTestWTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checker(overrides?: CallOverrides): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<[string]>;

    increaseCount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    ops(overrides?: CallOverrides): Promise<[string]>;
  };

  checker(overrides?: CallOverrides): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

  increaseCount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  ops(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    checker(overrides?: CallOverrides): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

    increaseCount(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    checker(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    increaseCount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseCount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastExecuted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
