/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace GelatoSafeModule {
  export type TxSpecStruct = {
    to: string;
    selector: BytesLike;
    hasValue: boolean;
    operation: BigNumberish;
  };

  export type TxSpecStructOutput = [string, string, boolean, number] & {
    to: string;
    selector: string;
    hasValue: boolean;
    operation: number;
  };

  export type TxStruct = {
    to: string;
    data: BytesLike;
    value: BigNumberish;
    operation: BigNumberish;
  };

  export type TxStructOutput = [string, string, BigNumber, number] & {
    to: string;
    data: string;
    value: BigNumber;
    operation: number;
  };
}

export interface GelatoSafeModuleInterface extends utils.Interface {
  contractName: "GelatoSafeModule";
  functions: {
    "encodeTx(address,(address,bytes4,bool,uint8)[])": FunctionFragment;
    "execute(address,(address,bytes,uint256,uint8)[])": FunctionFragment;
    "getExecTx((address,bytes,uint256,uint8)[])": FunctionFragment;
    "isWhitelistedTransaction(address,(address,bytes4,bool,uint8)[])": FunctionFragment;
    "removeTransaction((address,bytes4,bool,uint8)[])": FunctionFragment;
    "whitelistTransaction((address,bytes4,bool,uint8)[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "encodeTx", values: [string, GelatoSafeModule.TxSpecStruct[]]): string;
  encodeFunctionData(functionFragment: "execute", values: [string, GelatoSafeModule.TxStruct[]]): string;
  encodeFunctionData(functionFragment: "getExecTx", values: [GelatoSafeModule.TxStruct[]]): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedTransaction",
    values: [string, GelatoSafeModule.TxSpecStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "removeTransaction", values: [GelatoSafeModule.TxSpecStruct[]]): string;
  encodeFunctionData(functionFragment: "whitelistTransaction", values: [GelatoSafeModule.TxSpecStruct[]]): string;

  decodeFunctionResult(functionFragment: "encodeTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getExecTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWhitelistedTransaction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeTransaction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistTransaction", data: BytesLike): Result;

  events: {};
}

export interface GelatoSafeModule extends BaseContract {
  contractName: "GelatoSafeModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GelatoSafeModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeTx(_safe: string, _txSpecs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<[string]>;

    execute(
      _safe: string,
      _txs: GelatoSafeModule.TxStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExecTx(
      _txs: GelatoSafeModule.TxStruct[],
      overrides?: CallOverrides
    ): Promise<
      [GelatoSafeModule.TxStructOutput] & {
        execTx: GelatoSafeModule.TxStructOutput;
      }
    >;

    isWhitelistedTransaction(
      _safe: string,
      _txSpecs: GelatoSafeModule.TxSpecStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  encodeTx(_safe: string, _txSpecs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<string>;

  execute(
    _safe: string,
    _txs: GelatoSafeModule.TxStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExecTx(_txs: GelatoSafeModule.TxStruct[], overrides?: CallOverrides): Promise<GelatoSafeModule.TxStructOutput>;

  isWhitelistedTransaction(
    _safe: string,
    _txSpecs: GelatoSafeModule.TxSpecStruct[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeTransaction(
    _txs: GelatoSafeModule.TxSpecStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistTransaction(
    _txs: GelatoSafeModule.TxSpecStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    encodeTx(_safe: string, _txSpecs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<string>;

    execute(_safe: string, _txs: GelatoSafeModule.TxStruct[], overrides?: CallOverrides): Promise<void>;

    getExecTx(_txs: GelatoSafeModule.TxStruct[], overrides?: CallOverrides): Promise<GelatoSafeModule.TxStructOutput>;

    isWhitelistedTransaction(
      _safe: string,
      _txSpecs: GelatoSafeModule.TxSpecStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeTransaction(_txs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<void>;

    whitelistTransaction(_txs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    encodeTx(_safe: string, _txSpecs: GelatoSafeModule.TxSpecStruct[], overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _safe: string,
      _txs: GelatoSafeModule.TxStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExecTx(_txs: GelatoSafeModule.TxStruct[], overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistedTransaction(
      _safe: string,
      _txSpecs: GelatoSafeModule.TxSpecStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeTx(
      _safe: string,
      _txSpecs: GelatoSafeModule.TxSpecStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      _safe: string,
      _txs: GelatoSafeModule.TxStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExecTx(_txs: GelatoSafeModule.TxStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelistedTransaction(
      _safe: string,
      _txSpecs: GelatoSafeModule.TxSpecStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistTransaction(
      _txs: GelatoSafeModule.TxSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
